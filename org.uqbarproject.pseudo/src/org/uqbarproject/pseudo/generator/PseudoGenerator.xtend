/*
 * generated by Xtext
 */
package org.uqbarproject.pseudo.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.uqbarproject.pseudo.pseudo.Attribute
import org.uqbarproject.pseudo.pseudo.Type
import org.uqbarproject.pseudo.pseudo.Method
import org.uqbarproject.pseudo.pseudo.Declaration
import org.eclipse.emf.ecore.EObject


class PseudoGenerator implements IGenerator {
	
    @Inject extension IQualifiedNameProvider	
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		resource.allContents.filter(typeof(Type)).forEach [
			fsa.generateFile(
				it.fullyQualifiedName.toString("/") + ".java", 
				it.compile
			)
		]
	}

  	def dispatch compile(EObject declaration) { 
  		subclassResponsibility as String
  	}
	def dispatch compile(Type type) '''
	  public class «type.name» extends «type.effectiveSuperType» {
	  	«FOR declaration : type.declarations»
	  	  «declaration.compile»		
	  	«ENDFOR»
	  }
  	'''
  	def dispatch compile(Method declaration) '''
	  public Object «declaration.name»() {
	  	return null;
	  }
	'''
	def dispatch compile(Attribute declaration) '''
	  private Object «declaration.name» = «declaration.effectiveInitialValue»;
	  public void set«declaration.name.toFirstUpper»(Object value) {
	  	this.«declaration.name» = value;
	  }
	  public Object get«declaration.name.toFirstUpper»() {
	  	return this.«declaration.name»;
	  }
	'''

	def effectiveInitialValue(Attribute attribute) {
		if (attribute.initialValue != null) attribute.initialValue else "null"  
	}
	
	def effectiveSuperType(Type type) { 
		if (type.superType != null) type.superType.name else 'java.lang.Object'
	}
	
	def Object subclassResponsibility() {
		throw new UnsupportedOperationException()
	}
}
