/*
 * generated by Xtext
 */
package org.uqbarproject.pseudo.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.uqbarproject.pseudo.services.PseudoGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class PseudoFormatter extends AbstractDeclarativeFormatter {

  @Override
  protected void configureFormatting(FormattingConfig c) {
    PseudoGrammarAccess grammar = (PseudoGrammarAccess) getGrammarAccess();
    c.setLinewrap(0, 1, 2).before(grammar.getSL_COMMENTRule());
    c.setLinewrap(0, 1, 2).before(grammar.getML_COMMENTRule());
    c.setLinewrap(0, 1, 1).after(grammar.getML_COMMENTRule());
    
    c.setLinewrap(2).around(grammar.getMethodRule());
    c.setLinewrap().around(grammar.getAttributeRule());
    
    c.setLinewrap().around(grammar.getStatementRule());
    
    c.setLinewrap().before(grammar.getWHEN_TOKENRule());
    c.setLinewrap().after(grammar.getTHEN_TOKENRule());
    c.setLinewrap().around(grammar.getOTHERWISE_TOKENRule());
    
    c.setLinewrap().before(grammar.getNEW_TOKENRule());
    c.setLinewrap().after(grammar.getINITIALIZATION_BLOCK_TOKENRule());
    c.setLinewrap().before(grammar.getINITIALIZE_WITH_TOKENRule());
    
    c.setSpace("  ");
    
    c.setLinewrap().around(grammar.getEND_TOKENRule());
    
    c.setNoSpace().around(grammar.getMESSAGE_SEND_TOKENRule());
    c.setNoSpace().before(grammar.getSEPARATOR_TOKENRule());
    c.setNoSpace().around(grammar.getOPEN_TOKENRule());
    c.setNoSpace().before(grammar.getCLOSE_TOKENRule());
    c.setNoSpace().after(grammar.getLIST_OPEN_TOKENRule());
    c.setNoSpace().after(grammar.getSET_OPEN_TOKENRule());
    c.setNoSpace().before(grammar.getLIST_CLOSE_TOKENRule());
    c.setNoSpace().before(grammar.getSET_CLOSE_TOKENRule());
    
    
    c.setIndentationIncrement().before(grammar.getWhenExpressionAccess().getActionsExpressionParserRuleCall_0_3_0());
    c.setIndentationDecrement().after(grammar.getWhenExpressionAccess().getActionsExpressionParserRuleCall_0_3_0());
    c.setIndentationIncrement().before(grammar.getWhenExpressionAccess().getDefaultActionExpressionParserRuleCall_1_1_0());
    c.setIndentationDecrement().after(grammar.getWhenExpressionAccess().getDefaultActionExpressionParserRuleCall_1_1_0());
    
    c.setIndentation(
      grammar.getConstructionExpressionAccess().getINITIALIZATION_BLOCK_TOKENParserRuleCall_2_0(), 
      grammar.getConstructionExpressionAccess().getEND_TOKENParserRuleCall_2_2());

    c.setIndentationIncrement().after(grammar.getMETHOD_TOKENRule());
    c.setIndentationIncrement().after(grammar.getCLASS_METHOD_TOKENRule());
    c.setIndentationDecrement().before(grammar.getMethodAccess().getEND_TOKENParserRuleCall_4());
    
    c.setIndentation(
      grammar.getTypeAccess().getCLASS_TOKENParserRuleCall_0(), 
      grammar.getTypeAccess().getEND_TOKENParserRuleCall_4());
    
  }
}
