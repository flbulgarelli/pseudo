grammar org.uqbarproject.pseudo.Pseudo with org.uqbarproject.pseudo.Tokens

generate pseudo "http://www.uqbarproject.org/pseudo/Pseudo"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	types+=Type*;

Type:
	ClassType | ContractType | ExceptionType;

ExceptionType:
	'excepcion' name=ID;

ContractType:
	('interfaz' | 'contrato') name=(ID | OPERATOR)
	('hereda' contracts+=ID (',' contracts+=ID)*)?
	members+=Signature*;

Signature:
	'metodo' name=(ID | OPERATOR)
	('(' ((parameters+=Parameter) (',' parameters+=Parameter)*)? ')')?
	(':' type=ID)?;

ClassType:
	'clase' ('abstracta')? name=ID
	('(' (members+=Attribute (',' members+=Attribute)*)? ')')?
	(('hereda' superType=ID)
	('(' (constructionArguments+=Expression0 (',' constructionArguments+=Expression0)*)? ')')?)?
	('implementa' contracts+=ID (',' contracts+=ID)*)?
	('incluye' mixins+=ID (',' mixins+=ID)*)?
	members+=Method*;

Attribute:
	name=ID
	(':' type=ID)?;

Method:
	('redefinir')? 'metodo' ('de' 'clase' | 'abstracto')? name=ID
	(=> '(' ((parameters+=Parameter) (',' parameters+=Parameter)*)? ')')?
	(':' type=ID)?
	statements+=Statement*;

Parameter:
	name=ID (':' type=ID)?;

Statement:
	LocalVar |
	Assignment |
	Return |
	Increment |
	Decrement |
	Expression;

LocalVar:
	'variable' name=ID
	(':' type=ID)?
	('=' (value=Expression))?;

Return:
	'retornar' value=Expression;

Assignment:
	'asignar' (target=ID)
	'=' value=Expression;

Increment:
	'incrementar' target=ID ('en' value=Expression)?;

Decrement:
	'decrementar' target=ID ('en' value=Expression)?;

Expression returns Expression:
	(Expression0 => ({MessageSendExpression.receptor=current} message=Message)*);

Expression0 returns Expression:
	ThrowExpression |
	IdExpression |
	NumberExpression |
	StringExpression |
	NewExpression |
	ListExpression |
	LambdaExpression |
	TryExpression |
	WhenExpression |
	NullExpression |
	BooleanExpression |
	IfExpression |
	SelfExpression |
	'(' Expression ')';

Message:
	OperatorMessage | IdMessage;

OperatorMessage:
	selector=OPERATOR arguments+=Expression0;

IdMessage:
	'.' selector=ID
	=> ('(' (arguments+=Expression0 (',' arguments+=Expression0)*)? ')')?;

SelfExpression:
	{SelfExpression} SELF_TOKEN;

NullExpression:
	{NullExpression} NULL_TOKEN;

BooleanExpression:
	{TrueExpression} TRUE_TOKEN |
	{FalseExpression} FALSE_TOKEN;

ListExpression:
	{ListExpression} '[' (elements+=Expression (',' elements+=Expression)*)? ']';

StringExpression:
	value=STRING;

NumberExpression:
	value=Number;

IdExpression:
	name=ID;

Number:
	INT ('.' INT)?;

TryExpression:
	'intentar' tryStatements+=Statement+
	CATCH_TOKEN '('(exception = ID (':' type=ID)?)')'
	catchStatements+=Statement*
	END_TOKEN;

IfExpression:
	IF_TOKEN condition=Expression
	'entonces' trueActions+=Statement+
	('si' 'no' falseActions+=Statement+)?
	END_TOKEN;

WhenExpression:
	'matchear' target=Expression
	cases+=Case+
	END_TOKEN;

Case:
	'caso' condition=Expression
	'entonces' actions+=Statement+;

ThrowExpression:
	THROW_TOKEN throwable=Expression;

NewExpression:
	NEW_TOKEN target=ID
	(=> '(' (arguments+=Expression (',' arguments+=Expression)*)? ')')?;

LambdaExpression:
	{LambdaExpression}
	'lambda'
	(=> '(' ((parameters+=Parameter) (',' parameters+=Parameter)*)? ')')?
	statements+=Statement*
	END_TOKEN;

terminal OPERATOR:
	('~' | '$' | '+' | '-' | '\\' | '?' | '@' | '%' | '>' | '<' | '^' | '&' | '|' | '!' | '*' | '=')+;

	//		{InstanceAttribute} ATTRIBUTE_TOKEN name=ID ( ':' type=[Type] )? ('=' initialValue=GeneralExpression)?;
//
//ClassAttribute returns Attribute:
//	{ClassAttribute} CLASS_ATTRIBUTE_TOKEN name=ID ( ':' type=[Type] )? ('=' initialValue=GeneralExpression)?
//;
//RestrctedExpressionLevel1 returns Expression:
//	/*descending*/ RestrictedExpressionLevel0 |
//	SuperSend 
//;
//
//SuperSend:
//	{SuperSend} SUPER_TOKEN =>(OPEN_TOKEN (arguments+=RestrictedExpression (SEPARATOR_TOKEN arguments+=RestrictedExpression)*)? CLOSE_TOKEN)?
//;
//
