grammar org.uqbarproject.pseudo.Pseudo with org.uqbarproject.pseudo.Tokens

/*
 * 
lambdas? 
mixins
constructores alla scala
sin paquetes
orientado a mensajes
composicion de computaciones x LUEGO y
 * 
 */
generate pseudo "http://www.uqbarproject.org/pseudo/Pseudo"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	types+=Type*;

Type:
	CLASS_TOKEN name=ID (INHERITS_TOKEN superType=[Type])?
	members+=Member*
	END_TOKEN;

Member:
	Attribute | Method;

Method:
    overrideMethod?=OVERRIDE_TOKEN?	(METHOD_TOKEN | classMethod?=CLASS_METHOD_TOKEN) 
		name=ID 
		=> (OPEN_TOKEN ((parameters+=Parameter) (SEPARATOR_TOKEN parameters+=Parameter)*)?  CLOSE_TOKEN)?
	statements+=Statement*
	END_TOKEN;
	
Parameter:
	name = ID
;	

Statement:
	ExpressionLevel6 | Return | LocalVariable ;

Return:
	RETURN_TOKEN value=ExpressionLevel6;
	
LocalVariable:
	LET_TOKEN (name=ID) ('=' (value=ExpressionLevel6))?;

Attribute:
	(ATTRIBUTE_TOKEN|classAttribute?=CLASS_ATTRIBUTE_TOKEN) name=ID ('=' initialValue=ExpressionLevel6)?;

//Max prioirty
ExpressionLevel6 returns Expression:
	ExpressionLevel5 | 
	AssignExpression | 
	IncrementExpression | 
	DecrementExpression 
;

ExpressionLevel5 returns Expression:
	ComparisonExpression 
;

ExpressionLevel4 returns Expression:
	MessageSendExpression |
	ThrowExpression |
	InitExpression |
	SetupExpression |
	WhenExpression |
	TryCatchExpression
;

ExpressionLevel3 returns Expression:
	FilteredExpression
;

ExpressionLevel2 returns Expression:
	ExpressionLevel1 |
	NewExpression |
	CollectionLiteralExpression
;

ExpressionLevel1 returns Expression:
	ExpressionLevel0 |
	SuperSend 
;

//Min prioirty
ExpressionLevel0 returns Expression:
	IdExpression |
	StringExpression |
	NumberExpression |
	{NullExpression} NULL_TOKEN |
	{TrueExpression} TRUE_TOKEN |
	{FalseExpression} FALSE_TOKEN |
	{SelfExpression} SELF_TOKEN |
	OPEN_TOKEN ExpressionLevel6  CLOSE_TOKEN
	;
	
IdExpression:
	value=[ecore::EObject]
;	
StringExpression:
	value=STRING
;
	
NumberExpression:
	value=Number
;	

Number:
	INT ('.' INT)?;

MessageSendExpression returns Expression:
	ExpressionLevel3  ({MessageSendExpression.receptor=current} MESSAGE_SEND_TOKEN message=Applicable)* 
;

ComparisonExpression returns Expression:
	ExpressionLevel4 ({ComparisonExpression.left=current} op=ComparisonOperation right=ExpressionLevel4)? 
;

enum ComparisonOperation:
	GT='>' |
	LT='<' |
	GTE= '>=' |
	LTE= '<=' |
	EQ='=' |
	NEQ='/='
;

FilteredExpression returns Expression:
	ExpressionLevel2 ({FilteredExpression.target=current} WHERE_TOKEN condition=Applicable)?
;

CollectionLiteralExpression:
	ListLiteralExpression | SetLiteralExpression //| RangeLiteralExpression 
;

ListLiteralExpression:
	{ListLiteralExpression} LIST_OPEN_TOKEN (elements+=ExpressionLevel6 (SEPARATOR_TOKEN elements+=ExpressionLevel6)*)?  LIST_CLOSE_TOKEN	
;

SetLiteralExpression:
	{SetLiteralExpression} SET_OPEN_TOKEN (elements+=ExpressionLevel6 (SEPARATOR_TOKEN elements+=ExpressionLevel6)*)?  SET_CLOSE_TOKEN	
;

//RangeLiteralExpression:
//	'rango desde' start =  EmbeddableExpression 'hasta' end = EmbeddableExpression 
//;


WhenExpression:
	(WHEN_TOKEN (cases+=ExpressionLevel6) 
	THEN_TOKEN actions+= ExpressionLevel6)+ 
	(OTHERWISE_TOKEN defaultAction=ExpressionLevel6)?
	END_TOKEN 
;

TryCatchExpression:
	TRY_TOKEN 
		action= ExpressionLevel6
	CATCH_TOKEN  
		catchAction=ExpressionLevel6	
	END_TOKEN 
;



NewExpression:
	NEW_TOKEN target = [Type] =>(OPEN_TOKEN (arguments+=ExpressionLevel6 (SEPARATOR_TOKEN arguments+=ExpressionLevel6)*)? CLOSE_TOKEN)?
;

InitExpression:
	INIT_TOKEN (NEW_TOKEN)? target=[Type]
	(initializations+=Initialization)+  
	END_TOKEN 	
;

SetupExpression:
	SETUP_TOKEN target=ExpressionLevel6
	(initializations+=Initialization)+  
	END_TOKEN 	
;

Initialization:
	INIT_WITH_TOKEN attribute=ID  '='  initialValue=ExpressionLevel6
;

Applicable returns Applicable:
	Message ({Applicable.left=current} (andThen?=AND_THEN_TOKEN | compose?=COMPOSE_TOKEN | or?=OR_TOKEN | and?=AND_TOKEN) right=Message)*
;


Message returns Applicable:
	{Message} selector=ID =>(OPEN_TOKEN (arguments+=ExpressionLevel6 (SEPARATOR_TOKEN arguments+=ExpressionLevel6)*)? CLOSE_TOKEN)?
;

SuperSend:
	{SuperSend} SUPER_TOKEN =>(OPEN_TOKEN (arguments+=ExpressionLevel6 (SEPARATOR_TOKEN arguments+=ExpressionLevel6)*)? CLOSE_TOKEN)?
;

ThrowExpression:
	(ERROR_TOKEN | THROW_TOKEN) throwable=ExpressionLevel4
;


AssignExpression:
	ASSIGN_TOKEN (target=[ecore::EObject]) '=' value=ExpressionLevel5;
	
IncrementExpression:
	INCREMENT_TOKEN target=[ecore::EObject] (ACCUM_BY_TOKEN value=ExpressionLevel5)?;
	
DecrementExpression:
	DECREMENT_TOKEN target=[ecore::EObject] (ACCUM_BY_TOKEN value=ExpressionLevel5)?;
	
