grammar org.uqbarproject.pseudo.Pseudo with org.uqbarproject.pseudo.Tokens

/*
 * 
 * no tipado
en espaÃ±ol
preferir texto
filtrar, mapear, todos, ninguno, para cada a nivel lenguaje
listas literales: Conjunto( ), Lista(), Diccionario( clave : valor )
lambdas? 
sin sobrecarga
mixins
constructores alla scala
sin paquetes
orientado a mensajes
composicion de computaciones x LUEGO y
* variables automaticas?
 * 
 */
generate pseudo "http://www.uqbarproject.org/pseudo/Pseudo"

Model:
	types+=Type*;

Type:
	CLASS_TOKEN name=ID (INHERITS_TOKEN superType=[Type])?
	declarations+=Declaration*
	END_TOKEN;

Declaration:
	Attribute | Method;

Method:
	METHOD_TOKEN name=ID ('(' parameters+=ID* ')')?
	statements+=Expression*
	END_TOKEN;

Attribute:
	ATTRIBUTE_TOKEN name=ID (':=' initialValue=Expression)?;

Expression:
	EmbeddableExpression |
	NonEmbeddableExpression;
	
NonEmbeddableExpression:
	SimpleMessageSend |
	TraversableExpression |
	AssignmentExpression |
	IfExpression ;
	//CollectionLiteralExpression ; //TODO es bastante limitante que no se puedan embeber
	
EmbeddableExpression:
	{IdExpression} value=ID |
	{StringExpression} value=STRING |
	{NumberExpression} value=Number |
	{NullExpression} NULL_TOKEN |
	{TrueExpression} TRUE_TOKEN |
	{FalseExpression} FALSE_TOKEN |
	{SelfExpression} SELF_TOKEN 
//TODO	soportar? '(' NonEmbeddableExpression ')'
	;

Number:
	INT ('.' INT)?;

TraversableExpression:
//TODO ojo que se necesita aplicacion parcial o lambdas
	MaxExpression | //
	MinExpression | //
	AverageExpression | //
	SumExpression | //
	ComprehensionExpression | //
	ForEachExpression
	//	FindExpression |
	//	SortExpression 
;

CollectionLiteralExpression:
	ListLiteralExpression | SetLiteralExpression | RangeLiteralExpression 
;

ListLiteralExpression:
	{EmptyListExpression} 'lista' 'vacia' | NonEmptyListExpression
;

NonEmptyListExpression:
	'lista' 'con' (elements+=EmbeddableExpression)+	
;

SetLiteralExpression:
	{EmptySetExpression} 'conjunto' 'vacio' | NonEmptySetExpression
;

NonEmptySetExpression:
	'conjunto' 'con' (elements+=EmbeddableExpression)+	
;

RangeLiteralExpression:
	'rango desde' start =  EmbeddableExpression 'hasta' end = EmbeddableExpression 
;


IfExpression:
	IF_TOKEN (condition=Expression) 
	THEN_TOKEN trueExpression = Expression 
	OTHERWISE_TOKEN falseExpression = Expression
	END_TOKEN 
;

SimpleMessageSend:
	receptor = EmbeddableExpression ',' message = Message 
;

Message:
	UnaryMessage //| KeywordMessage
;

UnaryMessage:
	selector=ID //=>(key+=ID argument+=ID)*
;

ComprehensionExpression:
	'generar' (mapping=Message 'de')? target=EmbeddableExpression (=>'tal que' condition=Message)?;

ForEachExpression:
	'para cada' ID 'en' (target=EmbeddableExpression) (=>'tal que' condition=Message)? action=Message;

SumExpression:
	'sumatoria' mapping=Message 'de' target=EmbeddableExpression;

AverageExpression:
	'promedio' mapping=Message 'de' target=EmbeddableExpression;

MaxExpression:
	'maximo entre' target=EmbeddableExpression (=>'segun' condition=Message)?;

MinExpression:
	'minimo entre' target=EmbeddableExpression (=>'segun' condition=Message)?;

AssignmentExpression:
	(assigned=ID) ':=' (value=Expression);

