grammar org.uqbarproject.pseudo.Pseudo with org.uqbarproject.pseudo.Tokens

/*
 * 
lambdas? 
sin sobrecarga
mixins
constructores alla scala
sin paquetes
orientado a mensajes
composicion de computaciones x LUEGO y
* variables automaticas?
 * 
 */
generate pseudo "http://www.uqbarproject.org/pseudo/Pseudo"

Model:
	types+=Type*;

Type:
	CLASS_TOKEN name=ID (INHERITS_TOKEN superType=[Type])?
	declarations+=Declaration*
	END_TOKEN;

Declaration:
	Attribute | Method;

Method:
	(METHOD_TOKEN | classMethod?=CLASS_METHOD_TOKEN) name=ID ('(' (parameters+=ID (',' parameters+=ID)*)?  =>')')?
	statements+=Statement*
	END_TOKEN;

Statement:
	Expression | Return | Let ;

Return:
	RETURN_TOKEN value=EmbeddableExpression;
	
Let:
	LET_TOKEN (name=ID) ('=' (value=Expression))?;

Attribute:
	(ATTRIBUTE_TOKEN|classAttribute?=CLASS_ATTRIBUTE_TOKEN) name=ID ('=' initialValue=Expression)?;

Expression:
	EmbeddableExpression |
	NonEmbeddableExpression;
	
NonEmbeddableExpression:
	MessageSend |
	ConstructionExpression |
	TraversableExpression |
	AssignmentExpression |
	IncrementExpression |
	DecrementExpression |
	WhenExpression |
	CollectionLiteralExpression ; //TODO es bastante limitante que no se puedan embeber
	
EmbeddableExpression:
	{IdExpression} value=ID |
	{StringExpression} value=STRING |
	{NumberExpression} value=Number |
	{NullExpression} NULL_TOKEN |
	{TrueExpression} TRUE_TOKEN |
	{FalseExpression} FALSE_TOKEN |
	{SelfExpression} SELF_TOKEN 
//TODO	soportar? '(' NonEmbeddableExpression ')'
	;

Number:
	INT ('.' INT)?;

TraversableExpression:
//TODO ojo que se necesita aplicacion parcial o lambdas
	MaxExpression | //
	MinExpression | //
	AverageExpression | //
	SumExpression | //
	ComprehensionExpression | //
	ForEachExpression
	//	FindExpression |
	//	SortExpression 
;

CollectionLiteralExpression:
	ListLiteralExpression | SetLiteralExpression //| RangeLiteralExpression 
;

ListLiteralExpression:
	{ListLiteralExpression} LIST_OPEN_TOKEN (elements+=EmbeddableExpression (',' elements+=EmbeddableExpression)*)? => LIST_CLOSE_TOKEN	
;

SetLiteralExpression:
	{SetLiteralExpression} SET_OPEN_TOKEN (elements+=EmbeddableExpression (',' elements+=EmbeddableExpression)*)? => SET_CLOSE_TOKEN	
;

RangeLiteralExpression:
	'rango desde' start =  EmbeddableExpression 'hasta' end = EmbeddableExpression 
;


WhenExpression:
	(WHEN_TOKEN (cases+=Expression) 
	THEN_TOKEN actions+= Expression)+ 
	(OTHERWISE_TOKEN defaultAction=Expression)?
	END_TOKEN 
;

MessageSend:
	receptor = EmbeddableExpression '.' message = Message 
;

ConstructionExpression:
	NEW_TOKEN target = [Type] (INITIALIZATION_BLOCK_TOKEN (initializations+=Initialization)+  END_TOKEN)?	
;

Initialization:
	INITIALIZE_WITH_TOKEN attribute=ID  '='  initialValue=Expression
;

Message:
	selector=ID ( '(' (arguments+=EmbeddableExpression (',' arguments+=EmbeddableExpression)*)? =>')' )?
;

ComprehensionExpression:
	'generar' (mapping=Message 'de')? target=EmbeddableExpression (=>'tal que' condition=Message)?;

ForEachExpression:
	'para cada' ID 'en' (target=EmbeddableExpression) (=>'tal que' condition=Message)? action=Message;

SumExpression:
	'sumatoria' criteria=Message 'de' target=EmbeddableExpression;

AverageExpression:
	'promedio' criteria=Message 'de' target=EmbeddableExpression;

MaxExpression:
	'maximo entre' target=EmbeddableExpression (=>'segun' criteria=Message)?;

MinExpression:
	'minimo entre' target=EmbeddableExpression (=>'segun' criteria=Message)?;

AssignmentExpression:
	SET_TOKEN (target=ID) '=' (value=Expression);

IncrementExpression:
	INCREMENT_TOKEN target=ID (ACCUMULATE_BY_TOKEN value = EmbeddableExpression)?
;

DecrementExpression:
	DECREMENT_TOKEN target=ID (ACCUMULATE_BY_TOKEN value = EmbeddableExpression)?
;