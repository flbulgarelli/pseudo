grammar org.uqbarproject.pseudo.Pseudo with org.uqbarproject.pseudo.Tokens

generate pseudo "http://www.uqbarproject.org/pseudo/Pseudo"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	types+=Type*;

Type: ExceptionType | ClassType;

ExceptionType:
	EXCEPTION_TOKEN name=ID
;

ClassType:
  (CLASS_TOKEN name=ID (INHERITS_TOKEN superType=[Type])?) 
    (OPEN_TOKEN (members+=SimpleInstanceAttribute (SEPARATOR_TOKEN members+=SimpleInstanceAttribute)*)? CLOSE_TOKEN)?
	members+=Member*	
	END_TOKEN;

Member:
	InstanceAttribute | ClassAttribute | Method;

InstanceAttribute returns Attribute:
	{InstanceAttribute} ATTRIBUTE_TOKEN name=ID ( ':' type=[Type] )? ('=' initialValue=ExpressionLevel7)?;

ClassAttribute returns Attribute:
	{ClassAttribute} CLASS_ATTRIBUTE_TOKEN name=ID ( ':' type=[Type] )? ('=' initialValue=ExpressionLevel7)?
;
	
SimpleInstanceAttribute returns Attribute:
  {SimpleInstanceAttribute}	name=ID ( ':' type=[Type] )? ('=' initialValue=ExpressionLevel7)?
;

	
Method:
    overrideMethod?=OVERRIDE_TOKEN?	(METHOD_TOKEN | classMethod?=CLASS_METHOD_TOKEN) name=ID 
		=> (OPEN_TOKEN ((parameters+=Parameter) (SEPARATOR_TOKEN parameters+=Parameter)*)?  CLOSE_TOKEN)?
		( ':' type=[Type] )?
	statements+=Statement*
	END_TOKEN;
	
Parameter:
	name = ID ( ':' type=[Type] )?
;	

Statement:
	ExpressionLevel7 | Return | LocalVariable ;

Return:
	RETURN_TOKEN value=ExpressionLevel7;
	
LocalVariable:
	LET_TOKEN (name=ID) ( ':' type=[Type] )? ('=' (value=ExpressionLevel7))?;


//Max prioirty
ExpressionLevel7 returns Expression:
	ExpressionLevel6 | 
	AssignExpression | 
	IncrementExpression | 
	DecrementExpression 
;

ExpressionLevel6 returns Expression:
	ComparisonExpression 
;

ExpressionLevel5 returns Expression:
	MessageSendExpression |
	ForEachExpression |
	ThrowExpression |
	InitExpression |
	WhenExpression |
	TryCatchExpression
;

ExpressionLevel4 returns Expression:
	ExpressionLevel3 
//	|
//	TraverseExpression 
;

ExpressionLevel3 returns Expression:
	ExpressionLevel2
;

ExpressionLevel2 returns Expression:
	ExpressionLevel1 |
	NewExpression |
	CollectionLiteralExpression
;

ExpressionLevel1 returns Expression:
	ExpressionLevel0 |
	SuperSend 
;

//Min prioirty
ExpressionLevel0 returns Expression:
	IdExpression |
	StringExpression |
	NumberExpression |
	{NullExpression} NULL_TOKEN |
	{TrueExpression} TRUE_TOKEN |
	{FalseExpression} FALSE_TOKEN |
	{SelfExpression} SELF_TOKEN |
	{CatchedExceptionExpression} CATCHED_EXCEPTION_TOKEN |
	OPEN_TOKEN ExpressionLevel7  CLOSE_TOKEN
	;
	
IdExpression:
	value=[ecore::EObject]
;	
StringExpression:
	value=STRING
;
	
NumberExpression:
	value=Number
;	

Number:
	INT ('.' INT)?;

MessageSendExpression returns Expression:
	ExpressionLevel4  ({MessageSendExpression.receptor=current} MESSAGE_SEND_TOKEN message=Message)* 
;

ComparisonExpression returns Expression:
	ExpressionLevel5 ({ComparisonExpression.left=current} op=ComparisonOperation right=ExpressionLevel5)? 
;

enum ComparisonOperation:
	GT='>' |
	LT='<' |
	GTE= '>=' |
	LTE= '<=' |
	EQ='=' |
	NEQ='/='
;

ForEachExpression:
	//effectfull action
	{ForEach} FOR_EACH_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 DO_TOKEN action=ExpressionLevel7 END_TOKEN |
	//general transform action 
	{Map} MAP_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 BY_TOKEN action=ExpressionLevel7 END_TOKEN |
	{Filter} FILTER_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 BY_TOKEN action=ExpressionLevel7 END_TOKEN |
	{Sum} SUM_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 BY_TOKEN action=ExpressionLevel7 END_TOKEN |
	{Max} MAX_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 BY_TOKEN action=ExpressionLevel7 END_TOKEN |
	{Min} MIN_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 BY_TOKEN action=ExpressionLevel7 END_TOKEN |
	{Average} AVERAGE_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 BY_TOKEN action=ExpressionLevel7 END_TOKEN |
	{Sort} SORT_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 BY_TOKEN action=ExpressionLevel7 END_TOKEN |
	//boolean transform action
	{All} ALL_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 SATISFY_TOKEN action=ExpressionLevel7 END_TOKEN |
	{Any} ANY_TOKEN name=ID IN_TOKEN target=ExpressionLevel5 SATISFY_TOKEN action=ExpressionLevel7 END_TOKEN 
;

CollectionLiteralExpression:
	ListLiteralExpression | SetLiteralExpression  
;

ListLiteralExpression:
	{ListLiteralExpression} LIST_OPEN_TOKEN (elements+=ExpressionLevel7 (SEPARATOR_TOKEN elements+=ExpressionLevel7)*)?  LIST_CLOSE_TOKEN	
;

SetLiteralExpression:
	{SetLiteralExpression} SET_OPEN_TOKEN (elements+=ExpressionLevel7 (SEPARATOR_TOKEN elements+=ExpressionLevel7)*)?  SET_CLOSE_TOKEN	
;

WhenExpression:
	(WHEN_TOKEN (cases+=ExpressionLevel7) 
	THEN_TOKEN actions+= ExpressionLevel7)+ 
	(OTHERWISE_TOKEN defaultAction=ExpressionLevel7)?
	END_TOKEN 
;

TryCatchExpression:
	TRY_TOKEN 
		action= ExpressionLevel7
	CATCH_TOKEN  
		catchAction=ExpressionLevel7	
	END_TOKEN 
;


NewExpression:
	NEW_TOKEN target = [Type] =>(OPEN_TOKEN (arguments+=ExpressionLevel7 (SEPARATOR_TOKEN arguments+=ExpressionLevel7)*)? CLOSE_TOKEN)?
;

InitExpression:
	INIT_TOKEN (NEW_TOKEN)? target=[Type]
	(initializations+=Initialization)+  
	END_TOKEN 	
;

Initialization:
	INIT_WITH_TOKEN attribute=ID  '='  initialValue=ExpressionLevel7
;

Message:
	{Message} selector=ID =>(OPEN_TOKEN (arguments+=ExpressionLevel7 (SEPARATOR_TOKEN arguments+=ExpressionLevel7)*)? CLOSE_TOKEN)?
;

SuperSend:
	{SuperSend} SUPER_TOKEN =>(OPEN_TOKEN (arguments+=ExpressionLevel7 (SEPARATOR_TOKEN arguments+=ExpressionLevel7)*)? CLOSE_TOKEN)?
;

ThrowExpression:
  {MessageThrowExpression} ERROR_TOKEN throwable=ExpressionLevel5 |
  {ExceptionThrowExpression} THROW_TOKEN  throwable=ExpressionLevel5 
;

AssignExpression:
	ASSIGN_TOKEN (target=[ecore::EObject]) '=' value=ExpressionLevel6;
	
IncrementExpression:
	INCREMENT_TOKEN target=[ecore::EObject] (ACCUM_BY_TOKEN value=ExpressionLevel6)?;
	
DecrementExpression:
	DECREMENT_TOKEN target=[ecore::EObject] (ACCUM_BY_TOKEN value=ExpressionLevel6)?;
	
